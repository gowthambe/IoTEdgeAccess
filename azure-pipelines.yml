# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - azure-pipelines.yml
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '2.2.300'
    - task: DotNetCoreCLI@2
      displayName: 'Publish Artefacts'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/Azure.Iot.Edge.Modules.SecureAccess.csproj'
        arguments: '-c Release -v n -o $(Build.ArtifactStagingDirectory)/published'
        zipAfterPublish: false
    # - task: DotNetCoreCLI@2
    #   displayName: 'Unit Tests'
    #   inputs:
    #     command: 'test'
    #     projects: '**/*Tests*.csproj'
    #     testRunTitle: 'Unit Tests'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
- stage: Deploy
  dependsOn:
  - Build
  jobs:
  # - job: ARM32v7_Image_Deploy
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   steps:
  #   - task: Bash@3
  #     inputs:
  #       targetType: 'inline'
  #       script: 'sudo apt update && sudo apt install qemu-user-static -y'
  #   - task: Bash@3
  #     inputs:
  #       targetType: 'inline'
  #       script: 'sudo docker run --rm --privileged multiarch/qemu-user-static:register --reset'
  #   - task: Bash@3
  #     inputs:
  #       targetType: 'inline'
  #       script: 'sudo cp /usr/bin/qemu-arm-static $(System.DefaultWorkingDirectory)/SecureAccess'
  #   - task: Docker@2
  #     inputs:
  #       containerRegistry: 'Suneet Nangia Public Docker Hub'
  #       repository: 'suneetnangia/azure-iot-edge-secure-access'
  #       command: 'buildAndPush'
  #       Dockerfile: '**/Dockerfile.arm32v7.cicd'
  #       tags: '$(Build.BuildId)-arm32v7'
  #       buildContext: '**'
  - job: Linux_Image_Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
  #   - task: Docker@2
  #     inputs:
  #       containerRegistry: 'Suneet Nangia Public Docker Hub'
  #       repository: 'suneetnangia/azure-iot-edge-secure-access'
  #       command: 'buildAndPush'
  #       Dockerfile: './SecureAccess/Dockerfile.amd64.cicd'
  #       tags: '$(Build.BuildId)-linux64'
  #       buildContext: '$(Build.SourcesDirectory)'
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: ModuleBinaries
      - task: Docker@2
        inputs:
          containerRegistry: 'Suneet Nangia Public Docker Hub'
          repository: 'suneetnangia/azure-iot-edge-secure-access'
          command: 'build'
          Dockerfile: './SecureAccess/Dockerfile.amd64.cicd'
          buildContext: '$(Build.ArtifactStagingDirectory)'
          tags: '$(Build.BuildId)-linux64'
  # - job: Windows_Image_Deploy
  #   pool:
  #     vmImage: 'windows-2019'
  #   steps:
  #   - task: Docker@2
  #     inputs:
  #       containerRegistry: 'Suneet Nangia Public Docker Hub'
  #       repository: 'suneetnangia/azure-iot-edge-secure-access'
  #       command: 'buildAndPush'
  #       Dockerfile: '**/Dockerfile.windows-amd64.cicd'
  #       tags: '$(Build.BuildId)-win64'
  #       buildContext: '**'